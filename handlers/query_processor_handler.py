# handlers/query_processor_handler.py

import os
import joblib
import numpy as np
from typing import Dict

from TextProcessing import TextProcessor, process_text_pipeline
from utils.config import OUTPUT_DIR
from handlers.tfidf_handler import TfIdfHandler
class QueryProcessorHandler:
    """
    ูุนุงูุฌ ุนูููุงุช ุชุญููู ุงูููุงุฐุฌ ููุนุงูุฌุฉ ุงูุงุณุชุนูุงูุงุช.
    """
    def __init__(self, dataset_name: str, model_type: str):
        self.dataset_name = dataset_name
        self.model_type = model_type
        self.text_processor = TextProcessor()
        self._load_vectorizer()

    def _get_vectorizer_path(self) -> str:
        """
        ูุจูู ุงููุณุงุฑ ูููู ุงูู vectorizer ุจูุงุกู ุนูู ุงููููููุฉ ุงูุฌุฏูุฏุฉ.
        """
        # ูุฐุง ุงูููุทู ุตุญูุญ ููุชูุงูู ูุน ุงููููููุฉ ุงูุฌุฏูุฏุฉ
        model_specific_dir = os.path.join(OUTPUT_DIR, self.dataset_name, self.model_type)
        
        # ุงุณู ุงูููู ููุญุฏ ุงูุขู ููู 'vectorizer.joblib'
        return os.path.join(model_specific_dir, "vectorizer.joblib")

    def _load_vectorizer(self):
        """ุชุญููู ุงูู vectorizer ุฃู ูููุฐุฌ ุงูุชุถููู ููุท."""
        vectorizer_path = self._get_vectorizer_path()
        print(f"๐ Loading vectorizer from: {vectorizer_path}")
        self.vectorizer = joblib.load(vectorizer_path)
        print("โ Vectorizer loaded successfully.")

    def process(self, query: str) -> np.ndarray:
        """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ: ุชุนุงูุฌ ุงูุงุณุชุนูุงู ูุชุญููู ุฅูู ูุชุฌู."""
        print(f"๐ Processing query for model '{self.model_type}': '{query}'")
        
        # ===== ูุจุฏุฃ ุงูุชุนุฏูู ููุง =====

        if self.model_type == 'tfidf':
            # ุงูุฅุถุงูุฉ ุงูุฌุฏูุฏุฉ: ูุนุงูุฌุฉ ุงูุงุณุชุนูุงู ุจุดูู ูููุตู ูุบุฑุถ ุงูุทุจุงุนุฉ ููุท
            # ุงูู vectorizer ุณูููู ุจููุณ ูุฐู ุงูุนูููุฉ ุฏุงุฎููุงู
            processed_query_display = process_text_pipeline(query, self.text_processor)
            print(f"โ Query after processing: '{processed_query_display}'")
            
            query_vector = self.vectorizer.transform([query])
            return query_vector.toarray().tolist() # ุชุญููู ููุตูููุฉ ูุซููุฉ ุซู ูุงุฆูุฉ ูุฅุฑุณุงููุง ูู JSON

        elif self.model_type == 'bert':
            processed_query = process_text_pipeline(query, self.text_processor)
            
            # ุงูุฅุถุงูุฉ ุงูุฌุฏูุฏุฉ: ุทุจุงุนุฉ ุงูุงุณุชุนูุงู ุจุนุฏ ูุนุงูุฌุชู
            print(f"โ Query after processing: '{processed_query}'")

            query_vector = self.vectorizer.encode([processed_query], normalize_embeddings=True)
            return query_vector.tolist() # ุชุญููู ูู list ูุฅุฑุณุงููุง ูู JSON
        
        # ===== ููุชูู ุงูุชุนุฏูู ููุง =====
        
        raise NotImplementedError("Model type not implemented")